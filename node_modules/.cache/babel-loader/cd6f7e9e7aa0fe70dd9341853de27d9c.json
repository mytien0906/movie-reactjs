{"ast":null,"code":"import axios from 'axios';\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\nconst url = 'https://api.themoviedb.org/3';\nconst nowPlayingUrl = `${url}/movie/now_playing`;\nconst topratedUrl = `${url}/movie/top_rated`;\nconst movieUrl = `${url}/movie`;\nconst personsUrl = `${url}/person`;\nconst genreUrl = `${url}/genre/movie/list`;\nconst moviesUrl = `${url}/discover/movie`;\nconst personUrl = `${url}/trending/person/week`;\nconst treddingUrl = `${url}/trending/all/day`;\nconst peopleUrl = `${url}/person/popular`;\nconst tvsUrl = `${url}/discover/tv`;\nconst discoverUrl = `${url}/tv/airing_today`;\nconst tvUrl = `${url}/tv`;\nconst onTvUrl = `${url}/tv/on_the_air`;\nconst tvPopular = `${url}/tv/popular`;\nconst tvTopRate = `${url}/tv/top_rated`;\nconst genereTVUrl = `${url}/genre/tv/list`;\nexport const fetchMovies = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(nowPlayingUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieByGenre = async genre_ids => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1,\n        with_genres: genre_ids\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchPersons = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(personUrl, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['results'].map(p => ({\n      id: p['id'],\n      popularity: p['popularity'],\n      name: p['name'],\n      profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\n      known: p['known_for_department']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTopratedMovie = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(topratedUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n}; // Chi tiết tv\n\nexport const fetchTVDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n};\nexport const fetchTVVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n}; // Diễn viên chi tiết\n\nexport const fetchPersonDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${personsUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n};\nexport const fetchMovieCredits = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchCasts = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['cast_id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Phim đóng góp:\n\nexport const fetchTV = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${personsUrl}/${id}/movie_credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['cast'].map(c => ({\n      id: c['id'],\n      backPoster: posterUrl + c['backdrop_path'],\n      popularity: c['popularith'],\n      title: c['title'],\n      poster: posterUrl + c['poster_path'],\n      overview: c['overview'],\n      rating: c['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSimilarMovie = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Nhận hình ảnh : \n\nexport const fetchImages = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${personsUrl}/${id}/images`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['object'].map(c => ({\n      id: c['id'],\n      poster: posterUrl + c['file_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Các xu hướng phim : \n\nexport const fetchTredding = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(treddingUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // ON TV\n// Khám phá phim: \n\nexport const fetchDiscover = async genre_ids => {\n  try {\n    const {\n      data\n    } = await axios.get(tvsUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1,\n        with_genres: genre_ids\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTVAriting = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(discoverUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchOnTV = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(onTvUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTVGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genereTVUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTVPopular = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(tvPopular, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularity'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTVTopRate = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(tvTopRate, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularity'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTVCredits = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSessionTV = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const modifiedData = data['seasons'].map(c => ({\n      id: c['id'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['poster_path'],\n      img2: 'https://image.tmdb.org/t/p/w200' + c['poster_path'],\n      overview: c['overview'],\n      episode_count: c['episode_count'],\n      date: c['air_date'],\n      number_count: c['season_number']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Danh sách khuyến nghị:\n\nexport const fetchTVRecommendations = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}/recommendations`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['results'].map(c => ({\n      id: c['id'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\n      backdrop: 'https://image.tmdb.org/t/p/w200' + c['backdrop_path'],\n      overview: c['overview'],\n      first_air_date: c['first_air_date'],\n      original_name: c['original_name'],\n      vote_average: c['vote_average'],\n      popularity: c['popularity']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSimilarTV = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${tvUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularity'],\n      title: m['name'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n}; // Phần Person\n// Lấy danh sách các diễn viên:\n\nexport const fetchPeople = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(peopleUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      img: posterUrl + m['profile_path'],\n      title: m['name'],\n      name: m['title'],\n      popularity: m['popularity']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};","map":{"version":3,"sources":["C:/wamp64/www/movie-reactjs.git/src/server/index.js"],"names":["axios","apiKey","url","nowPlayingUrl","topratedUrl","movieUrl","personsUrl","genreUrl","moviesUrl","personUrl","treddingUrl","peopleUrl","tvsUrl","discoverUrl","tvUrl","onTvUrl","tvPopular","tvTopRate","genereTVUrl","fetchMovies","data","get","params","api_key","language","page","posterUrl","modifiedData","map","m","id","backPoster","popularity","title","poster","overview","rating","error","fetchGenre","g","name","fetchMovieByGenre","genre_ids","with_genres","fetchPersons","p","profileImg","known","fetchTopratedMovie","fetchMovieDetail","fetchTVDetail","fetchTVVideos","fetchPersonDetail","fetchMovieVideos","fetchMovieCredits","c","character","img","fetchCasts","fetchTV","fetchSimilarMovie","fetchImages","fetchTredding","fetchDiscover","fetchTVAriting","fetchOnTV","fetchTVGenre","fetchTVPopular","fetchTVTopRate","fetchTVCredits","fetchSessionTV","img2","episode_count","date","number_count","fetchTVRecommendations","backdrop","first_air_date","original_name","vote_average","fetchSimilarTV","fetchPeople"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\r\nconst url = 'https://api.themoviedb.org/3';\r\nconst nowPlayingUrl = `${url}/movie/now_playing`;\r\nconst topratedUrl = `${url}/movie/top_rated`;\r\nconst movieUrl = `${url}/movie`;\r\nconst personsUrl = `${url}/person`;\r\nconst genreUrl = `${url}/genre/movie/list`;\r\nconst moviesUrl = `${url}/discover/movie`;\r\n\r\nconst personUrl = `${url}/trending/person/week`;\r\nconst treddingUrl = `${url}/trending/all/day`;\r\n\r\nconst peopleUrl = `${url}/person/popular`;\r\n\r\nconst tvsUrl = `${url}/discover/tv`;\r\nconst discoverUrl = `${url}/tv/airing_today`;\r\nconst tvUrl = `${url}/tv`;\r\nconst onTvUrl = `${url}/tv/on_the_air`;\r\nconst tvPopular = `${url}/tv/popular`;\r\nconst tvTopRate = `${url}/tv/top_rated`;\r\nconst genereTVUrl = `${url}/genre/tv/list`;\r\n\r\n\r\nexport const fetchMovies = async () => {\r\n    try {\r\n        const { data } = await axios.get(nowPlayingUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchGenre = async () => {\r\n    try {\r\n        const { data } = await axios.get(genreUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const modifiedData = data['genres'].map((g) => ({\r\n            id: g['id'],\r\n            name: g['name']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchMovieByGenre = async (genre_ids) => {\r\n    try {\r\n        const { data } = await axios.get(moviesUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1,\r\n                with_genres: genre_ids\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchPersons = async () => {\r\n    try {\r\n        const { data } = await axios.get(personUrl, {\r\n            params: {\r\n                api_key: apiKey\r\n            }\r\n        })\r\n        const modifiedData = data['results'].map((p) => ({\r\n            id: p['id'],\r\n            popularity: p['popularity'],\r\n            name: p['name'],\r\n            profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\r\n            known: p['known_for_department']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchTopratedMovie = async () => {\r\n    try {\r\n        const { data } = await axios.get(topratedUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchMovieDetail = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        return data;\r\n    } catch (error) { }\r\n}\r\n// Chi tiết tv\r\nexport const fetchTVDetail = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        return data;\r\n    } catch (error) { }\r\n}\r\nexport const fetchTVVideos = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}/videos`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n            }\r\n        });\r\n        return data['results'][0];\r\n    } catch (error) { }\r\n}\r\n\r\n// Diễn viên chi tiết\r\nexport const fetchPersonDetail = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${personsUrl}/${id}`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        return data;\r\n    } catch (error) { }\r\n}\r\nexport const fetchMovieVideos = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/videos`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        return data['results'][0];\r\n    } catch (error) { }\r\n}\r\nexport const fetchMovieCredits = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const modifiedData = data['cast'].map((c) => ({\r\n            id: c['id'],\r\n            character: c['character'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchCasts = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const modifiedData = data['cast'].map((c) => ({\r\n            id: c['cast_id'],\r\n            character: c['character'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n// Phim đóng góp:\r\nexport const fetchTV = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${personsUrl}/${id}/movie_credits`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['cast'].map((c) => ({\r\n            id: c['id'],\r\n            backPoster: posterUrl + c['backdrop_path'],\r\n            popularity: c['popularith'],\r\n            title: c['title'],\r\n            poster: posterUrl + c['poster_path'],\r\n            overview: c['overview'],\r\n            rating: c['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchSimilarMovie = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/similar`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n// Nhận hình ảnh : \r\nexport const fetchImages = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${personsUrl}/${id}/images`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['object'].map((c) => ({\r\n            id: c['id'],\r\n            poster: posterUrl + c['file_path'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n// Các xu hướng phim : \r\nexport const fetchTredding = async () => {\r\n    try {\r\n        const { data } = await axios.get(treddingUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n// ON TV\r\n// Khám phá phim: \r\nexport const fetchDiscover = async (genre_ids) => {\r\n    try {\r\n        const { data } = await axios.get(tvsUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1,\r\n                with_genres: genre_ids\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchTVAriting = async () => {\r\n    try {\r\n        const { data } = await axios.get(discoverUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1,\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchOnTV = async () => {\r\n    try {\r\n        const { data } = await axios.get(onTvUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchTVGenre = async () => {\r\n    try {\r\n        const { data } = await axios.get(genereTVUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const modifiedData = data['genres'].map((g) => ({\r\n            id: g['id'],\r\n            name: g['name']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchTVPopular = async () => {\r\n    try {\r\n        const { data } = await axios.get(tvPopular, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularity'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchTVTopRate = async () => {\r\n    try {\r\n        const { data } = await axios.get(tvTopRate, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularity'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchTVCredits = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}/credits`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const modifiedData = data['cast'].map((c) => ({\r\n            id: c['id'],\r\n            character: c['character'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchSessionTV = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        const modifiedData = data['seasons'].map((c) => ({\r\n            id: c['id'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['poster_path'],\r\n            img2: 'https://image.tmdb.org/t/p/w200' + c['poster_path'],\r\n            overview: c['overview'],\r\n            episode_count: c['episode_count'],\r\n            date: c['air_date'],\r\n            number_count: c['season_number'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n// Danh sách khuyến nghị:\r\n\r\nexport const fetchTVRecommendations = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}/recommendations`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const modifiedData = data['results'].map((c) => ({\r\n            id: c['id'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\r\n            backdrop: 'https://image.tmdb.org/t/p/w200' + c['backdrop_path'],\r\n            overview: c['overview'],\r\n            first_air_date: c['first_air_date'],\r\n            original_name: c['original_name'],\r\n            vote_average: c['vote_average'],\r\n            popularity: c['popularity'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchSimilarTV = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${tvUrl}/${id}/similar`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularity'],\r\n            title: m['name'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n// Phần Person\r\n// Lấy danh sách các diễn viên:\r\nexport const fetchPeople = async () => {\r\n    try {\r\n        const { data } = await axios.get(peopleUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            img: posterUrl + m['profile_path'],\r\n            title: m['name'],\r\n            name:m['title'],\r\n            popularity:m['popularity'],\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}