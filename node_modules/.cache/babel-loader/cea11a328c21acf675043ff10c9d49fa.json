{"ast":null,"code":"import axios from 'axios'; // Connect\n\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\nconst url = 'https://api.themoviedb.org/3'; // Play movie\n\nconst nowPlayingUrl = `${url}/movie/now_playing`; // Top rate moving\n\nconst topratedUrl = `${url}/movie/top_rated`; // Categories movie\n\nconst genreUrl = `${url}/genre/movie/list`; // List movie\n\nconst moviesUrl = `${url}/discover/movie`; // Person week\n\nconst personUrl = `${url}/trending/person/week`; // Page home : \n\nexport const fetchMovies = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(nowPlayingUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieByGenre = async genre_ids => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1,\n        with_genres: genre_ids\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchPersons = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(personUrl, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['results'].map(p => ({\n      id: p['id'],\n      popularity: p['popularity'],\n      name: p['name'],\n      profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\n      known: p['known_for_department']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTopratedMovie = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(topratedUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};","map":{"version":3,"sources":["C:/wamp64/www/movie-reactjs/src/server/index.js"],"names":["axios","apiKey","url","nowPlayingUrl","topratedUrl","genreUrl","moviesUrl","personUrl","fetchMovies","data","get","params","api_key","language","page","posterUrl","modifiedData","map","m","id","backPoster","popularity","title","poster","overview","rating","error","fetchGenre","g","name","fetchMovieByGenre","genre_ids","with_genres","fetchPersons","p","profileImg","known","fetchTopratedMovie"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\n// Connect\r\nconst apiKey = 'a4999a28333d1147dbac0d104526337a';\r\nconst url = 'https://api.themoviedb.org/3';\r\n\r\n// Play movie\r\nconst nowPlayingUrl = `${url}/movie/now_playing`;\r\n// Top rate moving\r\nconst topratedUrl = `${url}/movie/top_rated`;\r\n// Categories movie\r\nconst genreUrl = `${url}/genre/movie/list`;\r\n// List movie\r\nconst moviesUrl = `${url}/discover/movie`;\r\n// Person week\r\nconst personUrl = `${url}/trending/person/week`;\r\n\r\n// Page home : \r\nexport const fetchMovies = async () => {\r\n    try {\r\n        const { data } = await axios.get(nowPlayingUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchGenre = async () => {\r\n    try {\r\n        const { data } = await axios.get(genreUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const modifiedData = data['genres'].map((g) => ({\r\n            id: g['id'],\r\n            name: g['name']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchMovieByGenre = async (genre_ids) => {\r\n    try {\r\n        const { data } = await axios.get(moviesUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1,\r\n                with_genres: genre_ids\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchPersons = async () => {\r\n    try {\r\n        const { data } = await axios.get(personUrl, {\r\n            params: {\r\n                api_key: apiKey\r\n            }\r\n        })\r\n        const modifiedData = data['results'].map((p) => ({\r\n            id: p['id'],\r\n            popularity: p['popularity'],\r\n            name: p['name'],\r\n            profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\r\n            known: p['known_for_department']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\nexport const fetchTopratedMovie = async () => {\r\n    try {\r\n        const { data } = await axios.get(topratedUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}